// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Service.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TradingSystem.Core {

  /// <summary>Holder for reflection information generated from Service.proto</summary>
  public static partial class ServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for Service.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1TZXJ2aWNlLnByb3RvEhJUcmFkaW5nU3lzdGVtLkNvcmUiHQoMRXJyb3JD",
            "b2RlTXNnEg0KBVZhbHVlGAEgASgFIogBCghPcmRlck1zZxIOCgZBY3Rpb24Y",
            "ASABKAUSDgoGU3ltYm9sGAIgASgJEgoKAklkGAMgASgDEhEKCUlzQnV5U2lk",
            "ZRgEIAEoCBINCgVQcmljZRgFIAEoAxIMCgRTaXplGAYgASgDEg4KBlVzZXJJ",
            "ZBgHIAEoBRIQCghQb3NpdGlvbhgIIAEoBTJZCgdTZXJ2aWNlEk4KCkVudGVy",
            "T3JkZXISHC5UcmFkaW5nU3lzdGVtLkNvcmUuT3JkZXJNc2caIC5UcmFkaW5n",
            "U3lzdGVtLkNvcmUuRXJyb3JDb2RlTXNnIgBCFaoCElRyYWRpbmdTeXN0ZW0u",
            "Q29yZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSystem.Core.ErrorCodeMsg), global::TradingSystem.Core.ErrorCodeMsg.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TradingSystem.Core.OrderMsg), global::TradingSystem.Core.OrderMsg.Parser, new[]{ "Action", "Symbol", "Id", "IsBuySide", "Price", "Size", "UserId", "Position" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ErrorCodeMsg : pb::IMessage<ErrorCodeMsg> {
    private static readonly pb::MessageParser<ErrorCodeMsg> _parser = new pb::MessageParser<ErrorCodeMsg>(() => new ErrorCodeMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ErrorCodeMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSystem.Core.ServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorCodeMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorCodeMsg(ErrorCodeMsg other) : this() {
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ErrorCodeMsg Clone() {
      return new ErrorCodeMsg(this);
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ErrorCodeMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ErrorCodeMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ErrorCodeMsg other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OrderMsg : pb::IMessage<OrderMsg> {
    private static readonly pb::MessageParser<OrderMsg> _parser = new pb::MessageParser<OrderMsg>(() => new OrderMsg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TradingSystem.Core.ServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMsg(OrderMsg other) : this() {
      action_ = other.action_;
      symbol_ = other.symbol_;
      id_ = other.id_;
      isBuySide_ = other.isBuySide_;
      price_ = other.price_;
      size_ = other.size_;
      userId_ = other.userId_;
      position_ = other.position_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMsg Clone() {
      return new OrderMsg(this);
    }

    /// <summary>Field number for the "Action" field.</summary>
    public const int ActionFieldNumber = 1;
    private int action_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "Symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 3;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "IsBuySide" field.</summary>
    public const int IsBuySideFieldNumber = 4;
    private bool isBuySide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBuySide {
      get { return isBuySide_; }
      set {
        isBuySide_ = value;
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 5;
    private long price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 6;
    private long size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "UserId" field.</summary>
    public const int UserIdFieldNumber = 7;
    private int userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 8;
    private int position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if (Symbol != other.Symbol) return false;
      if (Id != other.Id) return false;
      if (IsBuySide != other.IsBuySide) return false;
      if (Price != other.Price) return false;
      if (Size != other.Size) return false;
      if (UserId != other.UserId) return false;
      if (Position != other.Position) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (IsBuySide != false) hash ^= IsBuySide.GetHashCode();
      if (Price != 0L) hash ^= Price.GetHashCode();
      if (Size != 0L) hash ^= Size.GetHashCode();
      if (UserId != 0) hash ^= UserId.GetHashCode();
      if (Position != 0) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Action);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Id != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Id);
      }
      if (IsBuySide != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsBuySide);
      }
      if (Price != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Price);
      }
      if (Size != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Size);
      }
      if (UserId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UserId);
      }
      if (Position != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Action);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (IsBuySide != false) {
        size += 1 + 1;
      }
      if (Price != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Price);
      }
      if (Size != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
      }
      if (UserId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
      }
      if (Position != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderMsg other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.IsBuySide != false) {
        IsBuySide = other.IsBuySide;
      }
      if (other.Price != 0L) {
        Price = other.Price;
      }
      if (other.Size != 0L) {
        Size = other.Size;
      }
      if (other.UserId != 0) {
        UserId = other.UserId;
      }
      if (other.Position != 0) {
        Position = other.Position;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Action = input.ReadInt32();
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Id = input.ReadInt64();
            break;
          }
          case 32: {
            IsBuySide = input.ReadBool();
            break;
          }
          case 40: {
            Price = input.ReadInt64();
            break;
          }
          case 48: {
            Size = input.ReadInt64();
            break;
          }
          case 56: {
            UserId = input.ReadInt32();
            break;
          }
          case 64: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
